<?php
/**
 * DidPurchaseResponseDid
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ilinaya SMSFlow
 *
 * Ilinaya SMSFlow API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: all@ilinaya.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DidPurchaseResponseDid Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DidPurchaseResponseDid implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DidPurchaseResponse_did';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'did_number' => 'string',
        'monthly_fee' => 'int',
        'activation_fee' => 'int',
        'next_billing_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'did_number' => null,
        'monthly_fee' => null,
        'activation_fee' => null,
        'next_billing_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'did_number' => 'did_number',
        'monthly_fee' => 'monthly_fee',
        'activation_fee' => 'activation_fee',
        'next_billing_date' => 'next_billing_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'did_number' => 'setDidNumber',
        'monthly_fee' => 'setMonthlyFee',
        'activation_fee' => 'setActivationFee',
        'next_billing_date' => 'setNextBillingDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'did_number' => 'getDidNumber',
        'monthly_fee' => 'getMonthlyFee',
        'activation_fee' => 'getActivationFee',
        'next_billing_date' => 'getNextBillingDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['did_number'] = isset($data['did_number']) ? $data['did_number'] : '1230980989';
        $this->container['monthly_fee'] = isset($data['monthly_fee']) ? $data['monthly_fee'] : null;
        $this->container['activation_fee'] = isset($data['activation_fee']) ? $data['activation_fee'] : null;
        $this->container['next_billing_date'] = isset($data['next_billing_date']) ? $data['next_billing_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets did_number
     *
     * @return string
     */
    public function getDidNumber()
    {
        return $this->container['did_number'];
    }

    /**
     * Sets did_number
     *
     * @param string $did_number Purchased phone number
     *
     * @return $this
     */
    public function setDidNumber($did_number)
    {
        $this->container['did_number'] = $did_number;

        return $this;
    }

    /**
     * Gets monthly_fee
     *
     * @return int
     */
    public function getMonthlyFee()
    {
        return $this->container['monthly_fee'];
    }

    /**
     * Sets monthly_fee
     *
     * @param int $monthly_fee monthly_fee
     *
     * @return $this
     */
    public function setMonthlyFee($monthly_fee)
    {
        $this->container['monthly_fee'] = $monthly_fee;

        return $this;
    }

    /**
     * Gets activation_fee
     *
     * @return int
     */
    public function getActivationFee()
    {
        return $this->container['activation_fee'];
    }

    /**
     * Sets activation_fee
     *
     * @param int $activation_fee activation_fee
     *
     * @return $this
     */
    public function setActivationFee($activation_fee)
    {
        $this->container['activation_fee'] = $activation_fee;

        return $this;
    }

    /**
     * Gets next_billing_date
     *
     * @return string
     */
    public function getNextBillingDate()
    {
        return $this->container['next_billing_date'];
    }

    /**
     * Sets next_billing_date
     *
     * @param string $next_billing_date next_billing_date
     *
     * @return $this
     */
    public function setNextBillingDate($next_billing_date)
    {
        $this->container['next_billing_date'] = $next_billing_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


