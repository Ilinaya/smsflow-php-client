<?php
/**
 * PurchaseHistoryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ilinaya SMSFlow
 *
 * Ilinaya SMSFlow API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: all@ilinaya.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseHistoryItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseHistoryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseHistoryItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => 'string',
        'purchase_type' => 'string',
        'amt' => 'int',
        'balance_before' => 'int',
        'balance_after' => 'int',
        'did' => '\Swagger\Client\Model\PurchaseHistoryItemDid',
        'package' => '\Swagger\Client\Model\PurchaseHistoryItemPackage',
        'organization_user' => '\Swagger\Client\Model\PurchaseHistoryItemOrganizationUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => null,
        'purchase_type' => null,
        'amt' => null,
        'balance_before' => null,
        'balance_after' => null,
        'did' => null,
        'package' => null,
        'organization_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'purchase_type' => 'purchase_type',
        'amt' => 'amt',
        'balance_before' => 'balance_before',
        'balance_after' => 'balance_after',
        'did' => 'did',
        'package' => 'package',
        'organization_user' => 'organization_user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'purchase_type' => 'setPurchaseType',
        'amt' => 'setAmt',
        'balance_before' => 'setBalanceBefore',
        'balance_after' => 'setBalanceAfter',
        'did' => 'setDid',
        'package' => 'setPackage',
        'organization_user' => 'setOrganizationUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'purchase_type' => 'getPurchaseType',
        'amt' => 'getAmt',
        'balance_before' => 'getBalanceBefore',
        'balance_after' => 'getBalanceAfter',
        'did' => 'getDid',
        'package' => 'getPackage',
        'organization_user' => 'getOrganizationUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['purchase_type'] = isset($data['purchase_type']) ? $data['purchase_type'] : 'package';
        $this->container['amt'] = isset($data['amt']) ? $data['amt'] : null;
        $this->container['balance_before'] = isset($data['balance_before']) ? $data['balance_before'] : null;
        $this->container['balance_after'] = isset($data['balance_after']) ? $data['balance_after'] : null;
        $this->container['did'] = isset($data['did']) ? $data['did'] : null;
        $this->container['package'] = isset($data['package']) ? $data['package'] : null;
        $this->container['organization_user'] = isset($data['organization_user']) ? $data['organization_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets purchase_type
     *
     * @return string
     */
    public function getPurchaseType()
    {
        return $this->container['purchase_type'];
    }

    /**
     * Sets purchase_type
     *
     * @param string $purchase_type purchase_type
     *
     * @return $this
     */
    public function setPurchaseType($purchase_type)
    {
        $this->container['purchase_type'] = $purchase_type;

        return $this;
    }

    /**
     * Gets amt
     *
     * @return int
     */
    public function getAmt()
    {
        return $this->container['amt'];
    }

    /**
     * Sets amt
     *
     * @param int $amt amt
     *
     * @return $this
     */
    public function setAmt($amt)
    {
        $this->container['amt'] = $amt;

        return $this;
    }

    /**
     * Gets balance_before
     *
     * @return int
     */
    public function getBalanceBefore()
    {
        return $this->container['balance_before'];
    }

    /**
     * Sets balance_before
     *
     * @param int $balance_before balance_before
     *
     * @return $this
     */
    public function setBalanceBefore($balance_before)
    {
        $this->container['balance_before'] = $balance_before;

        return $this;
    }

    /**
     * Gets balance_after
     *
     * @return int
     */
    public function getBalanceAfter()
    {
        return $this->container['balance_after'];
    }

    /**
     * Sets balance_after
     *
     * @param int $balance_after balance_after
     *
     * @return $this
     */
    public function setBalanceAfter($balance_after)
    {
        $this->container['balance_after'] = $balance_after;

        return $this;
    }

    /**
     * Gets did
     *
     * @return \Swagger\Client\Model\PurchaseHistoryItemDid
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param \Swagger\Client\Model\PurchaseHistoryItemDid $did did
     *
     * @return $this
     */
    public function setDid($did)
    {
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets package
     *
     * @return \Swagger\Client\Model\PurchaseHistoryItemPackage
     */
    public function getPackage()
    {
        return $this->container['package'];
    }

    /**
     * Sets package
     *
     * @param \Swagger\Client\Model\PurchaseHistoryItemPackage $package package
     *
     * @return $this
     */
    public function setPackage($package)
    {
        $this->container['package'] = $package;

        return $this;
    }

    /**
     * Gets organization_user
     *
     * @return \Swagger\Client\Model\PurchaseHistoryItemOrganizationUser
     */
    public function getOrganizationUser()
    {
        return $this->container['organization_user'];
    }

    /**
     * Sets organization_user
     *
     * @param \Swagger\Client\Model\PurchaseHistoryItemOrganizationUser $organization_user organization_user
     *
     * @return $this
     */
    public function setOrganizationUser($organization_user)
    {
        $this->container['organization_user'] = $organization_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


